Tools
=====

This section describes the tools use to run, report and analyze OpenFPGA, Yosys and VPR results, as presented in :numref:`fig_flow_dse`.
These enable an easier 

.. figure:: ../images/openfpga-softcores-dse.svg
   :width: 60%
   :align: center
   :name: fig_flow_dse

   *OpenFPGA-Softcores* available tools.

``run-softcore``
----------------
.. program:: run-softcore

Basic Usage
~~~~~~~~~~~

This tool runs a single soft-core benchmark simulation with the platform using a given FPGA architecture, using the following command::

    run-softcore <soft-core> <architecture>

where:

.. option:: <soft-core>

    Soft-core processor to evaluate.

.. option:: <architecture>

    FPGA architecture to evaluate, using any files in the 'fpga_archs/' dir.

.. note::

    This script use directly the OpenFPGA framework, then the ``OPENFPGA_PATH`` environment variable need to be exported.
    Just source the project ``setup_env.sh`` script to fix that error.

Optional Arguments
~~~~~~~~~~~~~~~~~~

.. option:: --device-layout <WxH|auto>

    Define a fixed FPGA layout.

    **Default:** ``auto``

.. option:: --channel-width <int|auto>

    Define a fixed FPGA channel width.

    **Default:** ``auto``

.. option:: --cache-size <int>

    Define the memory size of the soft-core (in Bytes).

    **Default:** ``1024``

.. option:: --isa {i,im,ima}

    Enable RISC-V ISA extensions.

    - ``i``: base integer instruction set,
    - ``m``: enable the multiplier/divider instruction extension,
    - ``c``: enable the compressed instruction extension.

    **Default:** ``i``

.. option:: --run-list <csv-filename>

    run multiple simulations listed in a CSV file, giving all arguments by columns

    **Default:** `None`

.. option:: --run-dir <path>
    
    Save all OpenFPGA outputs in a given directory
    
    **Default:** ``run_dir/``

``report-yosys-vpr``
--------------------
.. program:: report-yosys-vpr

Basic Usage
~~~~~~~~~~~

This tool parses *Yosys* and *VPR* result files generated by the *OpenFPGA* framework, and generate a CSV file, using the following command::

    report-yosys-vpr <search-path>

.. option:: <search-path>

    Specify a base directory to search reports (multiple directories could be specified).

    **Default:** ``run_dir/latest``

Optional Arguments
~~~~~~~~~~~~~~~~~~

.. option:: -o <csv-file>, --output <csv-file>

    Save results in a CSV format.

    **Default:** ``outputs/report_parser.csv``

``report-place-timing``
-----------------------
.. program:: report-place-timing

Basic Usage
~~~~~~~~~~~

This tool parses the timing report (setup, hold or pre-pack) generated by *OpenFPGA* framework and extend the description for each point of the path (*block type*, *block ID*, *block coordinates*, ...) using ``.net`` and ``.place`` reports.
The generated output file is a report file, following the report timing file standards, using the following command::

    report-place-timing <search-path>

.. option:: <search-path>

    Specify a base directory to search reports (multiple directories could be specified).

Optional Arguments
~~~~~~~~~~~~~~~~~~

.. option:: -p <path-id>, --path-id <path-id>
    
    Define the path number to print.

    **Default:** ``0``

.. option:: --hold
   
    Parse the hold report timing file.

.. option:: --pre-pack

    Parse the pre-pack report timing file.
    
.. option:: -o <rpt-file>, --output <rpt-file>

    Analyze all paths and save them in a RPT format.

``report-route-paths``
----------------------
.. program:: report-route-paths

Basic Usage
~~~~~~~~~~~

This tool parses the timing report (setup, hold or pre-pack) generated by *OpenFPGA* framework and extend the description for every start and end points of the path, adding basic metrics for a more complete analysis, RTL to physical routing.
The generated output file is a CSV file having a single line per path, using the following command::

    report-route-paths <search-path>

.. option:: <search-path>

    Specify a base directory to search reports (multiple directories could be specified).

Optional Arguments
~~~~~~~~~~~~~~~~~~

.. option:: -p <path-id>, --path-id <path-id>
    
    Define the path number to print.

    **Default:** ``0``

.. option:: --hold
   
    Parse the hold report timing file.

.. option:: --pre-pack

    Parse the pre-pack report timing file.
    
.. option:: -o <rpt-file>, --output <rpt-file>

    Analyze all paths and save them in a CSV format.

